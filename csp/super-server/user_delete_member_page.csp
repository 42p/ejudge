<%
%><%@include "includes.csp"
%><%
#include "ejudge/userlist.h"
#include "ejudge/userlist_clnt.h"
#include "ejudge/userlist_proto.h"
%><%
extern char const * const ss_member_string[];
%><%@set getter_name = "csp_get_user_delete_member_page"
%><%@set ac_prefix = "SSERV_CMD_"
%><%@set err_prefix = "SSERV_ERR_"
%><%@page csp_view_user_delete_member_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "stdvars.csp"
%><%
    const unsigned char *title = NULL;
    unsigned char subtitle_buf[1024];
    const unsigned char *subtitle = subtitle_buf;

    int other_user_id = 0;
    int serial = 0;
    int contest_id = 0;
    int group_id = 0;
    opcap_t gcaps = 0, caps = 0;
    unsigned char *xml_text = NULL;
    struct userlist_user *u = NULL;
    struct userlist_member *m = NULL;
    int role = 0, num = 0;

    const unsigned char *marked_str = NULL; // needed for users_top_menu.csp

    %><s:read name="other_user_id" /><%
    if (other_user_id <= 0) {
        FAIL(SSERV_ERR_INV_USER_ID);
    }
    %><s:read name="serial" /><%
    if (serial <= 0) {
        FAIL(SSERV_ERR_INV_SERIAL);
    }
    %><s:read name="contest_id" /><%
    if (contest_id <= 0) {
        FAIL(SSERV_ERR_INV_CONTEST);
    }
    if (contest_id > 0) {
        if (contests_get(contest_id, &cnts) < 0 || !cnts) {
            FAIL(SSERV_ERR_INV_CONTEST);
        }
    }

    //contest_id_str[0] = 0;
    //if (contest_id > 0) {
    //snprintf(contest_id_str, sizeof(contest_id_str), "&amp;contest_id=%d", contest_id);
    //}
    %><s:read name="group_id" default="0" /><%
    if (group_id < 0) group_id = 0;

    //group_id_str[0] = 0;
    //if (group_id > 0) {
    //snprintf(group_id_str, sizeof(group_id_str), "&amp;group_id=%d", group_id);
    //}

    if (phr->priv_level <= 0) FAIL(SSERV_ERR_PERM_DENIED);
    ss_get_global_caps(phr, &gcaps);
    ss_get_contest_caps(phr, cnts, &caps);
    caps = (caps | gcaps) & ((1L << OPCAP_EDIT_USER) | (1L << OPCAP_PRIV_EDIT_USER));
    if (!caps) FAIL(SSERV_ERR_PERM_DENIED);
    if (userlist_clnt_get_info(phr->userlist_clnt, ULS_PRIV_GET_USER_INFO,
                               other_user_id, contest_id, &xml_text) < 0) {
        FAIL(SSERV_ERR_DB_ERROR);
    }

    if (!(u = userlist_parse_user_str(xml_text))) FAIL(SSERV_ERR_DB_ERROR);

    if (ss_is_globally_privileged(phr, u)) {
        if (opcaps_check(gcaps, OPCAP_PRIV_EDIT_USER) < 0) FAIL(SSERV_ERR_PERM_DENIED);
    } else if (ss_is_contest_privileged(cnts, u)) {
        if (opcaps_check(caps, OPCAP_PRIV_EDIT_USER) < 0) FAIL(SSERV_ERR_PERM_DENIED);
    } else {
        if (opcaps_check(caps, OPCAP_EDIT_USER) < 0) FAIL(SSERV_ERR_PERM_DENIED);
    }

    m = NULL;
    if (u->cnts0 && u->cnts0->members) {
        m = userlist_get_member_nc(u->cnts0->members, serial, &role, &num);
    }
    if (!m) FAIL(SSERV_ERR_INV_SERIAL);
    if (role < 0 || role >= USERLIST_MB_LAST || num < 0) FAIL(SSERV_ERR_INV_SERIAL);

    snprintf(subtitle_buf, sizeof(subtitle_buf), "Deleting the member '%s'::%d (%d) of user %d, contest %d",
             ss_member_string[role], num + 1, serial, other_user_id, contest_id);

%><%@include "header.csp"
%>

<h2><s:v value="subtitle" /></h2>

<%@include "users_top_menu.csp"
%>
<%
  ss_print_user_info(log_f, out_f, phr, cnts, u, u->cnts0, m, role, num);
%>

<s:url name="CancelUrl" ac="user-detail-page">
  <s:param name="other_user_id" value="other_user_id" />
  <s:param name="contest_id" value="contest_id" fullCheckExpr="contest_id > 0" />
  <s:param name="group_id" value="group_id" fullCheckExpr="group_id > 0" />
</s:url>                                      
<s:url name="DeleteUrl" ac="user-delete-member-action">
  <s:param name="other_user_id" value="other_user_id" />
  <s:param name="serial" value="m->serial" />
  <s:param name="contest_id" value="contest_id" fullCheckExpr="contest_id > 0" />
  <s:param name="group_id" value="group_id" fullCheckExpr="group_id > 0" />
</s:url>                                      
<p><s:a url="CancelUrl">[Cancel]</s:a>&nbsp;<s:a url="DeleteUrl">[Delete]</s:a></p>

<%@include "footer.csp"
%><%
cleanup:
    l10n_resetlocale();
    html_armor_free(&ab);
    xfree(xml_text);
    userlist_free(&u->b);
%>





int
super_serve_op_USER_DELETE_MEMBER_PAGE(
        FILE *log_f,
        FILE *out_f,
        struct http_request_info *phr)
{
  int retval = 0;
  int other_user_id = 0, contest_id = 0, group_id = 0, serial = 0;
  const struct contest_desc *cnts = 0;
  unsigned char contest_id_str[128];
  unsigned char group_id_str[128];
  unsigned char *xml_text = 0;
  unsigned char buf[1024];
  unsigned char hbuf[1024];

  if (hr_cgi_param_int(phr, "other_user_id", &other_user_id) < 0 || other_user_id <= 0) {
    FAIL(SSERV_ERR_INV_USER_ID);
  }
  if (hr_cgi_param_int(phr, "serial", &serial) < 0 || serial <= 0) {
    FAIL(SSERV_ERR_INV_SERIAL);
  }
  if (hr_cgi_param_int(phr, "contest_id", &contest_id) < 0 || contest_id <= 0) {
    FAIL(SSERV_ERR_INV_CONTEST);
  }
  if (contest_id > 0) {
    if (contests_get(contest_id, &cnts) < 0 || !cnts) {
      FAIL(SSERV_ERR_INV_CONTEST);
    }
  }
  contest_id_str[0] = 0;
  if (contest_id > 0) {
    snprintf(contest_id_str, sizeof(contest_id_str), "&amp;contest_id=%d", contest_id);
  }
  hr_cgi_param_int_opt(phr, "group_id", &group_id, 0);
  if (group_id < 0) group_id = 0;
  group_id_str[0] = 0;
  if (group_id > 0) {
    snprintf(group_id_str, sizeof(group_id_str), "&amp;group_id=%d", group_id);
  }

  if (phr->priv_level <= 0) FAIL(SSERV_ERR_PERM_DENIED);
  ss_get_global_caps(phr, &gcaps);
  ss_get_contest_caps(phr, cnts, &caps);
  caps = (caps | gcaps) & ((1L << OPCAP_EDIT_USER) | (1L << OPCAP_PRIV_EDIT_USER));
  if (!caps) FAIL(SSERV_ERR_PERM_DENIED);

  if (userlist_clnt_get_info(phr->userlist_clnt, ULS_PRIV_GET_USER_INFO,
                             other_user_id, contest_id, &xml_text) < 0) {
    FAIL(SSERV_ERR_DB_ERROR);
  }
  if (!(u = userlist_parse_user_str(xml_text))) FAIL(SSERV_ERR_DB_ERROR);

  if (ss_is_globally_privileged(phr, u)) {
    if (opcaps_check(gcaps, OPCAP_PRIV_EDIT_USER) < 0) FAIL(SSERV_ERR_PERM_DENIED);
  } else if (ss_is_contest_privileged(cnts, u)) {
    if (opcaps_check(caps, OPCAP_PRIV_EDIT_USER) < 0) FAIL(SSERV_ERR_PERM_DENIED);
  } else {
    if (opcaps_check(caps, OPCAP_EDIT_USER) < 0) FAIL(SSERV_ERR_PERM_DENIED);
  }

  m = 0;
  if (u->cnts0 && u->cnts0->members) {
    m = userlist_get_member_nc(u->cnts0->members, serial, &role, &num);
  }
  if (!m) FAIL(SSERV_ERR_INV_SERIAL);
  if (role < 0 || role >= USERLIST_MB_LAST || num < 0) FAIL(SSERV_ERR_INV_SERIAL);

  snprintf(buf, sizeof(buf), "serve-control: %s, delete the member '%s'::%d (%d) of user %d, contest %d",
           phr->html_name, member_string[role], num + 1, serial,
           other_user_id, contest_id);
  ss_write_html_header(out_f, phr, buf);
  fprintf(out_f, "<h1>%s</h1>\n<br/>\n", buf);

  print_top_navigation_links(log_f, out_f, phr, contest_id, group_id, other_user_id, NULL);

  print_user_info(log_f, out_f, phr, cnts, u, u->cnts0, m, role, num);

  fprintf(out_f, "<p>%s[%s]</a>",
          html_hyperref(hbuf, sizeof(hbuf), phr->session_id, phr->self_url,
                        NULL, "action=%d&amp;op=%d&amp;other_user_id=%d%s%s",
                        SSERV_CMD_HTTP_REQUEST, SSERV_CMD_USER_DETAIL_PAGE,
                        other_user_id, contest_id_str, group_id_str),
          "Cancel");

  fprintf(out_f, "&nbsp;%s[%s]</a></p>",
          html_hyperref(hbuf, sizeof(hbuf), phr->session_id, phr->self_url,
                        NULL, "action=%d&amp;op=%d&amp;other_user_id=%d&amp;serial=%d%s%s",
                        SSERV_CMD_HTTP_REQUEST, SSERV_CMD_USER_DELETE_MEMBER_ACTION,
                        other_user_id, m->serial, contest_id_str, group_id_str),
          "Delete");

cleanup:
  xfree(xml_text); xml_text = 0;
  return retval;
}
